<template>
  <view class="container">
    <view class="zan-panel no-bd--top no-mg">
      <picker range="{{ types }}" range-key="name" @change="handleTypeChange">
        <view class="zan-cell zan-cell--access">
          <view class="zan-cell__hd zan-field__title">材料类型</view>
          <view class="zan-cell__bd">
            <view wx:if="{{ typeName }}">{{ typeName }}</view>
            <view wx:else class="gray-dark">请选择</view>
          </view>
          <view class="zan-cell__ft"></view>
        </view>
      </picker>
    </view>

    <view class="zan-panel no-bd--btm" style="padding: 15px 0">
      <img-picker
        :list.sync="imgs"
        :readonly.sync="loading"
        @onPicker.user="handlePickerImg"
        @onRemove.user="handleRemoveImg"
      ></img-picker>
      <view class="content-padded">
        <view><text>\n</text></view>
        <view class="zan-row">
          <view class="zan-col zan-col-20 zan-col-offset-2">
            <button class="zan-btn zan-btn--primary {{ loading ? 'zan-btn--loading' : '' }}" disabled="{{ loading }}" @tap="handleSubmit">
              <text class="icon icon-plus"></text>
              <text>上传</text>
            </button>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import {validateFile} from '@/utils/utils'
import {getMaterialTypes} from '@/api/common'
import {uploadAttachment} from '@/api/mediate'
import ImgPicker from '@/components/img-picker'

export default class MaterialAdd extends wepy.page {
  config = {
    navigationBarTitleText: '添加纠纷证据材料'
  }

  components = {
    'img-picker': ImgPicker
  }

  data = {
    caseId: '',
    types: [],
    typeIndex: '',
    imgs: [],
    loading: false,
    isBack: false
  }

  computed = {
    typeName() {
      const item = this.types[this.typeIndex]

      return item ? item.name : ''
    }
  }

  methods = {
    handleTypeChange({detail}) {
      this.typeIndex = detail.value
    },
    // 选择一张图片
    handlePickerImg() {
      wx.chooseImage({
        success: ({tempFiles = []}) => {
          if (validateFile(tempFiles)) {
            this.imgs = this.imgs.concat(tempFiles)

            this.$apply()
          }
        }
      })
    },
    // 移除一张图片
    handleRemoveImg(index) {
      this.imgs.splice(index, 1)
    },
    handleSubmit() {
      if (this.typeIndex === '') {
        return wx.showToast({title: '请选择材料类型', icon: 'none', duration: 3e3})
      }

      if (this.imgs.length === 0) {
        return wx.showToast({title: '前添加证据材料', icon: 'none', duration: 3e3})
      }

      this.loading = true
      this.startTask()
      .then(() => {
        this.loading = false
        this.$apply()

        if (this.isBack) {
          wx.navigateBack()
        } else {
          wx.redirectTo({url: '/pages/user/user?event=1'})
        }
      })
      .catch((e) => {
        console.log(e)
        this.loading = false
        this.$apply()
      })
    }
  }

  // 上传文件
  uploadFile(index) {
    const item = this.types[this.typeIndex] || {}

    const {name, type} = item

    return new Promise((resolve, reject) => {
      // console.error(this.imgs[index].path)
      uploadAttachment({
        name: 'file',
        filePath: this.imgs[index].path,
        formData: {
          name,
          type,
          lawCaseId: this.caseId
        }
      })
      .then(resolve)
      .catch(reject)
    })
  }

  // 启动上传任务
  startTask() {
    return new Promise((resolve, reject) => {
      this.uploadTask(0, resolve, reject)
    })
  }

  // 上传任务
  uploadTask(index, done, fail) {
    const task = this.taskItem(index)

    const handler = (d, cb) => {
      if (index + 1 === this.imgs.length) {
        cb(d)
      } else {
        this.uploadTask(index + 1, done, fail)
      }
    }

    task.then(d => handler(d, done)).catch(e => handler(e, fail))
  }

  // 单个上传任务
  taskItem(index) {
    return new Promise((resolve, reject) => {
      const item = this.imgs[index]

      // 若当前图片已经上传过了，则不处理，避免重复上传
      if (item.status === 'success') {
        resolve(index)
      }

      item.status = 'loading'
      this.$apply()

      this.uploadFile(index)
      .then(() => {
        item.status = 'success'
        this.$apply()
        resolve(index)
      })
      .catch(e => {
        item.status = 'error'
        this.$apply()
        reject(e)
      })
    })
  }

  // 加载类型数据
  fetchTypes() {
    getMaterialTypes({lawCaseId: this.caseId})
    .then((list = []) => {
      this.types = list

      this.$apply()
    })
  }

  onLoad({caseid, back}) {
    this.caseId = caseid
    this.isBack = !!back
    this.fetchTypes()
  }
}
</script>

<style lang="scss">
  @import '../../styles/variables';

  .bg-default {
    background-color: $background-color;
  }
</style>
